{"meta":{"title":"并非菜鸟的博客","subtitle":null,"description":null,"author":"YaxuSong","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"rsync的使用与配置","slug":"rsync的使用与配置","date":"2018-01-09T03:31:15.000Z","updated":"2018-01-09T06:12:01.395Z","comments":true,"path":"2018/01/09/rsync的使用与配置/","link":"","permalink":"http://yoursite.com/2018/01/09/rsync的使用与配置/","excerpt":"一、什么是rsyncrsync，remote synchronize顾名思意就知道它是一款实现远程同步功能的软件，它在同步文件的同时，可以保持原来文件的权限、时间、软硬链接等附加信息。 rsync是用 “rsync 算法”提供了一个客户机和远程文件服务器的文件同步的快速方法，而且可以通过ssh方式来传输文件，这样其保密性也非常好，另外它还是免费的软件。 二、rsync的安装rysnc的官方网站：http://rsync.samba.org可以从上面得到最新的版本。目前最新版是3.05。当然，因为rsync是一款如此有用的软件，所以很多Linux的发行版本都将它收录在内了。","text":"一、什么是rsyncrsync，remote synchronize顾名思意就知道它是一款实现远程同步功能的软件，它在同步文件的同时，可以保持原来文件的权限、时间、软硬链接等附加信息。 rsync是用 “rsync 算法”提供了一个客户机和远程文件服务器的文件同步的快速方法，而且可以通过ssh方式来传输文件，这样其保密性也非常好，另外它还是免费的软件。 二、rsync的安装rysnc的官方网站：http://rsync.samba.org可以从上面得到最新的版本。目前最新版是3.05。当然，因为rsync是一款如此有用的软件，所以很多Linux的发行版本都将它收录在内了。 软件包安装 命令 平台 # sudo apt-get install rsync 注：在debian、ubuntu 等在线安装方法； # yum install rsync 注：Fedora、Redhat 等在线安装方法； # rpm -ivh rsync 注：Fedora、Redhat 等rpm包安装方法； 其它Linux发行版，请用相应的软件包管理方法来安装。 源码包安装 tar xvf rsync-xxx.tar.gz cd rsync-xxx ./configure –prefix=/usr ;make ;make install 注：在用源码包编译安装之前，您得安装gcc等编译开具才行； 三、rsync的配置rsync的主要有以下三个配置文件rsyncd.conf(主配置文件)、rsyncd.secrets(密码文件)、rsyncd.motd(rysnc服务器信息)比如我们要备份服务器上的/home和/opt，在/home中我想把easylife和samba目录排除在外；12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 # Distributed under the terms of the GNU General Public License v2 # Minimal configuration file for rsync daemon # See rsync(1) and rsyncd.conf(5) man pages for help # This line is required by the /etc/init.d/rsyncd script pid file = /var/run/rsyncd.pid port = 873 address = 192.168.1.171 #uid = nobody #gid = nobody uid = root gid = root use chroot = yes read only = yes #limit access to private LANs hosts allow=192.168.1.0/255.255.255.0 10.0.1.0/255.255.255.0 hosts deny=* max connections = 5 motd file = /etc/rsyncd.motd #This will give you a separate log file #log file = /var/log/rsync.log #This will log every file transferred - up to 85,000+ per user, per sync #transfer logging = yes log format = %t %a %m %f %b syslog facility = local3 timeout = 300 [rhel4home] path = /home list=yes ignore errors auth users = root secrets file = /etc/rsyncd.secrets comment = This is RHEL 4 data exclude = easylife/ samba/ [rhel4opt] path = /opt list=no ignore errors comment = This is RHEL 4 opt auth users = easylife secrets file = /etc/rsyncd/rsyncd.secrets 注：关于auth users是必须在服务器上存在的真实的系统用户，如果你想用多个用户以,号隔开，比如auth users = easylife,root 设定密码文件 密码文件格式很简单，rsyncd.secrets的内容格式为： 用户名:密码 我们在例子中rsyncd.secrets的内容如下类似的；在文档中说，有些系统不支持长密码，自己尝试着设置一下吧。12 easylife:keer root:mike chown root.root rsyncd.secrets #修改属主 chmod 600 rsyncd.secrets #修改权限 注：1、将rsyncd.secrets这个密码文件的文件属性设为root拥有, 且权限要设为600, 否则无法备份成功! 出于安全目的，文件的属性必需是只有属主可读。 2、这里的密码值得注意，为了安全你不能把系统用户的密码写在这里。比如你的系统用户easylife密码是000000，为了安全你可以让rsync中的easylife为keer。这和samba的用户认证的密码原理是差不多的。 设定rsyncd.motd 文件; 它是定义rysnc服务器信息的，也就是用户登录信息。比如让用户知道这个服务器是谁提供的等；类似ftp服务器登录时，我们所看到的 linuxsir.org ftp ……。 当然这在全局定义变量时，并不是必须的，你可以用#号注掉，或删除；我在这里写了一个 rsyncd.motd的内容为：1234 ++++++++++++++++++++++++++++++++++++++++++++++ Welcome to use the mike.org.cn rsync services!2002------2009 ++++++++++++++++++++++++++++++++++++++++++++++ 四、启动rsync服务器 相当简单，有以下几种方法 A、–daemon参数方式，是让rsync以服务器模式运行 #/usr/bin/rsync –daemon –config=/etc/rsyncd/rsyncd.conf #–config用于指定rsyncd.conf的位置,如果在/etc下可以不写 B、xinetd方式 修改services加入如下内容 # nano -w /etc/services rsync 873/tcp # rsync rsync 873/udp # rsync 这一步一般可以不做，通常都有这两行(我的RHEL4和GENTOO默认都有)。修改的目的是让系统知道873端口对应的服务名为rsync。如没有的话就自行加入。 设定 /etc/xinetd.d/rsync, 简单例子如下: # default: off # description: The rsync server is a good addition to am ftp server, as it \\ # allows crc checksumming etc. service rsync { disable = no socket_type = stream wait = no user = root server = /usr/bin/rsync server_args = –daemon log_on_failure += USERID } 上述, 主要是要打开rsync這個daemon, 一旦有rsync client要连接時, xinetd会把它转介給 rsyncd(port 873)。然后service xinetd restart, 使上述设定生效. rsync服务器和防火墙 Linux 防火墙是用iptables，所以我们至少在服务器端要让你所定义的rsync 服务器端口通过，客户端上也应该让通过。 #iptables -A INPUT -p tcp -m state –state NEW -m tcp –dport 873 -j ACCEPT #iptables -L 查看一下防火墙是不是打开了 873端口 如果你不太懂防火墙的配置，可以先service iptables stop 将防火墙关掉。当然在生产环境这是很危险的，做实验才可以这么做哟！ 五、通过rsync客户端来同步数据B1、列出rsync 服务器上的所提供的同步内容； 首先：我们看看rsync服务器上提供了哪些可用的数据源 # rsync –list-only root@192.168.145.5:: ++++++++++++++++++++++++++++++++++++++++++++++ Welcome to use the mike.org.cn rsync services! 2002——2009 ++++++++++++++++++++++++++++++++++++++++++++++ rhel4home This is RHEL 4 data 注：前面是rsync所提供的数据源，也就是我们在rsyncd.conf中所写的[rhel4home]模块。而“This is RHEL 4 data”是由[rhel4home]模块中的 comment = This is RHEL 4 data 提供的；为什么没有把rhel4opt数据源列出来呢？因为我们在[rhel4opt]中已经把list=no了。 $ rsync –list-only root@192.168.145.5::::rhel4home ++++++++++++++++++++++++++++++++++++++++++++++ Welcome to use the mike.org.cn rsync services! 2002——2009 ++++++++++++++++++++++++++++++++++++++++++++++ Password: drwxr-xr-x 4096 2009/03/15 21:33:13 . -rw-r–r– 1018 2009/03/02 02:33:41 ks.cfg -rwxr-xr-x 21288 2009/03/15 21:33:13 wgetpaste drwxrwxr-x 4096 2008/10/28 21:04:05 cvsroot drwx—— 4096 2008/11/30 16:30:58 easylife drwsr-sr-x 4096 2008/09/20 22:18:05 giddir drwx—— 4096 2008/09/29 14:18:46 quser1 drwx—— 4096 2008/09/27 14:38:12 quser2 drwx—— 4096 2008/11/14 06:10:19 test drwx—— 4096 2008/09/22 16:50:37 vbird1 drwx—— 4096 2008/09/19 15:28:45 vbird2 后面的root@ip中，root是指定密码文件中的用户名，之后的::rhel4home这是rhel4home模块名 B2、rsync客户端同步数据； #rsync -avzP root@192.168.145.5::rhel4home rhel4home Password: 这里要输入root的密码，是服务器端rsyncd.secrets提供的。在前面的例子中我们用的是mike，输入的密码并不回显，输好就回车。 注： 这个命令的意思就是说，用root用户登录到服务器上，把rhel4home数据，同步到本地当前目录rhel4home上。当然本地的目录是可以你自己 定义的。如果当你在客户端上当前操作的目录下没有rhel4home这个目录时，系统会自动为你创建一个；当存在rhel4home这个目录中，你要注意 它的写权限。 #rsync -avzP –delete linuxsir@linuxsir.org::rhel4home rhel4home 这回我们引入一个–delete 选项，表示客户端上的数据要与服务器端完全一致，如果 linuxsirhome目录中有服务器上不存在的文件，则删除。最终目的是让linuxsirhome目录上的数据完全与服务器上保持一致；用的时候要 小心点，最好不要把已经有重要数所据的目录，当做本地更新目录，否则会把你的数据全部删除； 設定 rsync client 设定密码文件 #rsync -avzP –delete –password-file=rsyncd.secrets root@192.168.145.5::rhel4home rhel4home 这次我们加了一个选项 –password-file=rsyncd.secrets，这是当我们以root用户登录rsync服务器同步数据时，密码将读取rsyncd.secrets这个文件。这个文件内容只是root用户的密码。我们要如下做； # touch rsyncd.secrets # chmod 600 rsyncd.secrets # echo “mike”&gt; rsyncd.secrets # rsync -avzP –delete –password-file=rsyncd.secrets root@192.168.145.5::rhel4home rhel4home 注：这里需要注意的是这份密码文件权限属性要设得只有属主可读。 这样就不需要密码了；其实这是比较重要的，因为服务器通过crond 计划任务还是有必要的； B3、让rsync客户端自动与服务器同步数据 服务器是重量级应用，所以数据的网络备份还是极为重要的。我们可以在生产型服务器上配置好rsync 服务器。我们可以把一台装有rysnc机器当做是备份服务器。让这台备份服务器，每天在早上4点开始同步服务器上的数据；并且每个备份都是完整备份。有时 硬盘坏掉，或者服务器数据被删除，完整备份还是相当重要的。这种备份相当于每天为服务器的数据做一个镜像，当生产型服务器发生事故时，我们可以轻松恢复数 据，能把数据损失降到最低；是不是这么回事？？ step1：创建同步脚本和密码文件 #mkdir /etc/cron.daily.rsync #cd /etc/cron.daily.rsync #touch rhel4home.sh rhel4opt.sh #chmod 755 /etc/cron.daily.rsync/.sh #mkdir /etc/rsyncd/ #touch /etc/rsyncd/rsyncrhel4root.secrets #touch /etc/rsyncd/rsyncrhel4easylife.secrets #chmod 600 /etc/rsyncd/rsync. 注： 我们在 /etc/cron.daily/中创建了两个文件rhel4home.sh和rhel4opt.sh ，并且是权限是755的。创建了两个密码文件root用户用的是rsyncrhel4root.secrets ，easylife用户用的是 rsyncrhel4easylife.secrets，权限是600； 我们编辑rhel4home.sh，内容是如下的： #!/bin/sh #backup 192.168.145.5:/home /usr/bin/rsync -avzP –password-file=/etc/rsyncd/rsyncrhel4root.password root@192.168.145.5::rhel4home /home/rhel4homebak/$(date +’%m-%d-%y’) 我们编辑 rhel4opt.sh ，内容是： #!/bin/sh #backup 192.168.145.5:/opt /usr/bin/rsync -avzP –password-file=/etc/rsyncd/rsyncrhel4easylife.secrets easylife@192.168.145.5::rhel4opt /home/rhel4hoptbak/$(date +’%m-%d-%y’) 注：你可以把rhel4home.sh和rhel4opt.sh的内容合并到一个文件中，比如都写到rhel4bak.sh中； 接着我们修改 /etc/rsyncd/rsyncrhel4root.secrets和rsyncrhel4easylife.secrets的内容； # echo “mike” &gt; /etc/rsyncd/rsyncrhel4root.secrets # echo “keer”&gt; /etc/rsyncd/rsyncrhel4easylife.secrets 然后我们再/home目录下创建rhel4homebak 和rhel4optbak两个目录，意思是服务器端的rhel4home数据同步到备份服务器上的/home/rhel4homebak 下，rhel4opt数据同步到 /home/rhel4optbak/目录下。并按年月日归档创建目录；每天备份都存档； #mkdir /home/rhel4homebak #mkdir /home/rhel4optbak step2：修改crond服务器的配置文件 加入到计划任务 #crontab -e 加入下面的内容： # Run daily cron jobs at 4:10 every day backup rhel4 data: 10 4 * /usr/bin/run-parts /etc/cron.daily.rsync 1&gt; /dev/null 注：第一行是注释，是说明内容，这样能自己记住。 第二行表示在每天早上4点10分的时候，运行 /etc/cron.daily.rsync 下的可执行脚本任务； 配置好后，要重启crond 服务器； # killall crond 注：杀死crond 服务器的进程； # ps aux |grep crond 注：查看一下是否被杀死； # /usr/sbin/crond 注：启动 crond 服务器； # ps aux |grep crond 注：查看一下是否启动了？ root 3815 0.0 0.0 1860 664 ? S 14:44 0:00 /usr/sbin/crond root 3819 0.0 0.0 2188 808 pts/1 S+ 14:45 0:00 grep crond","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"最近电脑重装了，导致电脑里边的博客全没了","slug":"最近电脑重装了，导致电脑里边的博客全没了","date":"2018-01-08T09:59:56.000Z","updated":"2018-01-08T10:03:59.693Z","comments":true,"path":"2018/01/08/最近电脑重装了，导致电脑里边的博客全没了/","link":"","permalink":"http://yoursite.com/2018/01/08/最近电脑重装了，导致电脑里边的博客全没了/","excerpt":"难受的事情发生了，上周的时候电脑出现无法进入系统的毛病，一直重启，一直想重做电脑的我，也正好趁着这次机会重做了系统，但是悲剧发生了。首先我没有还原系统，直接进行的系统重置，导致我的很多开发环境都没了。","text":"难受的事情发生了，上周的时候电脑出现无法进入系统的毛病，一直重启，一直想重做电脑的我，也正好趁着这次机会重做了系统，但是悲剧发生了。首先我没有还原系统，直接进行的系统重置，导致我的很多开发环境都没了。 其次，我的博客没有备份….所以今天有点时间，把博客的环境安装上了，但是md的文件没有了，原来的html网页还在，我在考虑怎么恢复。 超级难受","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"此时此刻的心情","slug":"此时此刻的心情","date":"2017-05-04T09:54:37.000Z","updated":"2018-01-08T09:56:15.175Z","comments":true,"path":"2017/05/04/此时此刻的心情/","link":"","permalink":"http://yoursite.com/2017/05/04/此时此刻的心情/","excerpt":"欢迎来到我的博客 也欢迎你们访问我的CSDN技术博客:并非菜鸟 自己的大部分技术博客还是在CSDN上写，而且自己的时间也不是很多，所以Github上边的博客也不是很多。之前很少有时间写博客的，现在工作了，也就会有时间去写了。 每天都觉得自己没有那么多的时间，也不知道时间都去了哪里。但是大部分时间都被自己浪费了吧。","text":"欢迎来到我的博客 也欢迎你们访问我的CSDN技术博客:并非菜鸟 自己的大部分技术博客还是在CSDN上写，而且自己的时间也不是很多，所以Github上边的博客也不是很多。之前很少有时间写博客的，现在工作了，也就会有时间去写了。 每天都觉得自己没有那么多的时间，也不知道时间都去了哪里。但是大部分时间都被自己浪费了吧。记得自己上大学的时候，每天中午都是别人睡醒了，自己才躺下，尤其是到了学期期末的时候，就连在路上都不敢耽误一点。每天晚上都到1、2点钟才睡，自己做了什么，自己并不知道。有些时候是为了赶学期期末的大作业在写代码。但是大多数的时候都是在看一些视频吧。记得有时候半夜3、4点钟的时候，突然看起Mybatis的教学视频，然后停不下来了。结果第二天没起来。自己现在想一想，那都是因为自己太贪玩造成的结果。自己平时学习的东西和知道的东西挺多的，但是最后自己发现对那些东西只是一个知道，甚至可能连那个东西是什么？做什么用的都不知道。 真心的希望自己能够改掉这些恶习，投入到自己平时的学习中来。让自己得到提升。现在工作了，感觉有事情做，每一天都很充实，都很快。每当自己没有事情的时候都很难受，希望自己能找点事做。 想到自己上大学的时候参加过很多的ACM的比赛，也拿到过奖。想到去哈工大去参加比赛的事情，觉得自己的大学还是没有白上。想到自己在班级中也算是一个会编程的大神还是很厉害的。想到自己平时帮助过很多同学解决了那么多的BUG，自己还是很佩服自己的。想到这些，现在自己还是对自己很有信心的，相信自己对代码、程序是有一定的认识和了解的。觉得自己生下来对这个来感。要不然也不能写代码入了迷，都忘记吃饭。希望自己能够在这条路上走的更远。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"welcome","slug":"welcome","date":"2017-05-03T09:45:44.000Z","updated":"2018-01-08T09:57:01.275Z","comments":true,"path":"2017/05/03/welcome/","link":"","permalink":"http://yoursite.com/2017/05/03/welcome/","excerpt":"欢迎来到我的博客，这是我的第一篇博客，这个博客经过我很长时间，反反复复的搞，终于搞得像个样子了，终于算是成功了，然后在搞这个博客的前前后后中，学到了很多东西。了解了很多。 很早我就有了Github账户，可是那时自己还不知道Git怎么用，然后就跑到网上买了一本书叫《Git权威指南》的书，但是自己并没有看多少。 然后自己就在另外一个网站上学习了Git的相关课程。大概算是有一个了解吧。","text":"欢迎来到我的博客，这是我的第一篇博客，这个博客经过我很长时间，反反复复的搞，终于搞得像个样子了，终于算是成功了，然后在搞这个博客的前前后后中，学到了很多东西。了解了很多。 很早我就有了Github账户，可是那时自己还不知道Git怎么用，然后就跑到网上买了一本书叫《Git权威指南》的书，但是自己并没有看多少。 然后自己就在另外一个网站上学习了Git的相关课程。大概算是有一个了解吧。 后来在Github上无意间看到了Github Pages,然后自己按照相应的介绍，自己也是搭建起来自己的博客，但是那会还不到了解MarkDown怎么弄，也不知道如何使用Jekll创建自己的博客。 不过自己看到网站里边的资源全是静态的，所以自己也是改了一些文件，然后生成可一个主页。 后来才知道Jekll是一个工具，主要是使用的Ruby,而现在自己建立起来的Github Pages 时使用的Hexo,使用的语言是Node.js而且自己对如何使用Hexo还是了解了不少。 在创建博客的过程中，我学到了很多关于Git的相关知识，觉得自己还是很充实的。而且自己也终于建起自己的Github Pages了,很开心。 不过现在自己也在纠结一件事情，那就是以后写博客到底在哪里写？","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]}